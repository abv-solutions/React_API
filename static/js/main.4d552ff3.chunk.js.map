{"version":3,"sources":["components/NavBar.js","components/ImageResults.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","margin","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","icon","getWindowDims","window","width","innerWidth","height","innerHeight","ImageResults","images","useState","windowDims","setWindowDims","open","setOpen","current","setCurrent","useEffect","handleResize","addEventListener","removeEventListener","GridList","cols","Math","round","map","img","GridListTile","key","id","src","largeImageURL","alt","GridListTileBar","tags","subtitle","user","actionIcon","onClick","image","Dialog","DialogContent","style","DialogActions","formControl","minWidth","input","Search","setImages","search","count","apiUrl","apiKey","state","setState","axios","get","then","res","data","hits","catch","err","handleChange","e","target","name","value","autoComplete","FormControl","TextField","label","onChange","InputLabel","Select","MenuItem","length","App","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d552ff3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst NavBar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Image Finder\r\n          </Typography>\r\n          <Button color=\"inherit\">Help</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  GridList,\r\n  GridListTile,\r\n  GridListTileBar,\r\n  IconButton,\r\n  Button,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@material-ui/core';\r\nimport ZoomIn from '@material-ui/icons/ZoomIn';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: theme.spacing(2),\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.8)',\r\n    marginRight: theme.spacing(1)\r\n  },\r\n}));\r\n\r\nconst getWindowDims = () => {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nconst ImageResults = ({ images }) => {\r\n  const classes = useStyles();\r\n  const [windowDims, setWindowDims] = useState(getWindowDims());\r\n  const [open, setOpen] = useState(false);\r\n  const [current, setCurrent] = useState('');\r\n\r\n  const handleOpen = image => {\r\n    setOpen(true);\r\n    setCurrent(image);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => setWindowDims(getWindowDims());\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList cols={Math.round(windowDims.width / 380)}>\r\n        {images.map(img => (\r\n          <GridListTile key={img.id}>\r\n            <img src={img.largeImageURL} alt=\"\" />\r\n            <GridListTileBar\r\n              title={img.tags}\r\n              subtitle={\r\n                <span>\r\n                  by <strong>{img.user}</strong>\r\n                </span>\r\n              }\r\n              actionIcon={\r\n                <IconButton\r\n                  className={classes.icon}\r\n                  onClick={() => handleOpen(img.largeImageURL)}\r\n                >\r\n                  <ZoomIn />\r\n                </IconButton>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n\r\n      <Dialog\r\n        open={open}\r\n      >\r\n        <DialogContent>\r\n          <img src={current} alt=\"\" style={{ width: '100%' }} />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageResults;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport ImageResults from './ImageResults';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(2),\r\n    minWidth: 120,\r\n  },\r\n  input: {\r\n    width: 160,\r\n  }\r\n}));\r\n\r\nconst Search = () => {\r\n  const classes = useStyles();\r\n  const [images, setImages] = useState([]);\r\n  const [state, setState] = useState({\r\n    search:'',\r\n    count: '',\r\n    apiUrl: 'https://pixabay.com/api',\r\n    apiKey: '13716808-3af92fba834c7ee7bad061620'\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (state.search === '') {\r\n      setImages([]);\r\n    } else {\r\n      axios\r\n        .get(`${state.apiUrl}/?key=${state.apiKey}&q=${state.search}&image_type=photo&per_page=${state.count}&safesearch=true`)\r\n        .then(res => {\r\n          setImages(res.data.hits);\r\n        })\r\n        .catch(err => {\r\n          setImages([]);\r\n        });\r\n    }\r\n  }, [state]);\r\n\r\n  const handleChange = e => {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form className={classes.root} autoComplete=\"off\">\r\n      <FormControl className={classes.formControl}>\r\n        <TextField\r\n          className={classes.input}\r\n          label=\"Search for images\"\r\n          name=\"search\"\r\n          onChange={handleChange}\r\n        />\r\n      </FormControl>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel>Number of results</InputLabel>\r\n        <Select\r\n          className={classes.input}\r\n          name=\"count\"\r\n          value={state.count}\r\n          onChange={handleChange}\r\n        >\r\n          <MenuItem value={5}>5</MenuItem>\r\n          <MenuItem value={10}>10</MenuItem>\r\n          <MenuItem value={20}>20</MenuItem>\r\n          <MenuItem value={50}>50</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <br />\r\n        {images.length > 0 ? (\r\n          <ImageResults images={images}/>\r\n        ) : null}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport NavBar from './components/NavBar';\r\nimport Search from './components/Search';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar />\r\n        <Search />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}